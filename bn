#!/bin/bash

if [[ $1 == "--help" ]] #call on help method if needed
then
    help
fi
if [[ $# -ne 2 ]] #check number of arguments, and if it is not the right number of arguments, print out the format of the code, and return exit 1
then
	echo "bn <year> <assigned gender f|F|m|M|b|B>">&2
	exit 1

fi

#This function prints out the help function. 
help()
{
    echo "Baby Names Utility - Version 1.0" 
    echo "This utility allows users to search for the rankings of baby names by year for both male and female names."
    echo
    echo "Usage:"
    echo "  bn <year> <assigned gender: f|F|m|M|b|B>"
    echo
    echo "Arguments:"
    echo "  year           A four-digit year between 1880 and 2022"
    echo "  assigned gender Can be f, m, F, M, b (for both genders)."
    echo
    echo "Example:"
    echo "  bn 2022 b"
    
    exit 0
}


if [[ ! $2 =~ ^[bBmMfF]+$ ]] #check if the gender is a valid option, and if it isn't, exit with code 2
then
    echo "Badly formatted assigned gender: $2">&2
    echo "bn <year> <assigned gender: f|F|m|M|b|B>">&2
    exit 2
fi

#these 4 statements store the whole list of baby names for the corresponding year, and also store the number of names for each gender for that year
list_male=$(cat 2XC3-data-1/us_baby_names/yob$1.txt | grep ",M")
total_male=$(cat 2XC3-data-1/us_baby_names/yob$1.txt | grep ",M" | wc -l)
list_female=$(cat 2XC3-data-1/us_baby_names/yob$1.txt | grep ",F")
total_female=$(cat 2XC3-data-1/us_baby_names/yob$1.txt | grep ",F" | wc -l)


year=$2 #store the year in a variable for the vailidity method


#this method checks if the year is valid, and print out if there is data for the year provided
validity()
{
    if [[ ! "$1" =~ ^[a-zA-Z]+$ ]] #make sure the word is valid
        then
            echo "Badly formatted name: $1" >&2
            exit 3
        fi
    if [[ -z $list_male && -z $list_female ]]
    then
        echo "No data for $year"
        exit 5
    fi
}

#These variables are for the rank method, this allows for the highest value to be stored, which allows the user to call on this method whenever they want to see the highest ranking name. 
highest_rank_male=$total_male
highest_rank_female=$total_female
highest_name_male=""
highest_name_female=""

gender=$2 #store the gender for the rank method

rank()
{
    if [[ $gender =~ [mMbB] ]]
    then
        echo "Highest ranking spot for male names: $highest_rank_male, for the name $highest_name_male"
    fi
    if [[ $gender =~ [fFbB] ]]
    then
        echo "Highest ranking spot for female names: $highest_rank_female, for the name $highest_name_female"
    fi
}
while read line; do
    IFS=' ' read -r -a words <<< "$line" # Split the line into an array of words using space as a delimiter
    for word in "${words[@]}"; do #go through each word in the array
        validity $word #check if the word is valid
        number_male=$(echo "$list_male" | grep -ni "^$word," | cut -d: -f1) #store the line number of the baby name into a variable
        number_female=$(echo "$list_female" | grep -ni "^$word," | cut -d: -f1)
        
        #These if-else statements set the new highest ranking variable for the rank function
        if [[ $highest_rank_male -gt $number_male && $number_male =~ ^[1-9] ]]
        then
            highest_rank_male=$number_male
            highest_name_male=$word
        fi
        if [[ $highest_rank_female -gt $number_female && $number_female =~ ^[1-9] ]]
        then
            highest_rank_female=$number_female
            highest_name_female=$word
        fi

        #These if-else statements check the function if the gender provided was a female, male, or both, and prints out the corresponding statements
        if [[ -z "$number_male" &&  $2 =~ [mMbB] ]]
        then
            echo "$1: $word not found among male names."
            if [[ -z "$number_female" && $2 =~ [bB] ]]
            then
                echo "$1: $word not found among female names."
            elif [[ ! -z "$number_female" && $2 =~ [bB] ]]
            then
                echo "$1: $word ranked $number_female out of $total_female female names."
            fi
        elif [[ -z "$number_female" &&  $2 =~ [fFbB] ]]	
        then
            echo "$1: $word not found among female names."
            if [[ -z "$number_male" && $2 =~ [bB] ]]
            then
                echo "$1: $word not found among male names."
            elif [[ ! -z "$number_male" && $2 =~ [bB] ]]
            then
                echo "$1: $word ranked $number_male out of $total_male male names."
            fi
        else
            if [[ $2 =~ [fFbB] ]]
            then
                echo "$1: $word ranked $number_female out of $total_female female names."
            fi
            if [[ $2 =~ [mMbB] ]]
            then
                echo "$1: $word ranked $number_male out of $total_male male names."
            fi
        fi
    done
done
